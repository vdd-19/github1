r;
  justify-content: center;
  cursor: pointer;
  font-size: 2rem;
  user-select: none;
  position: relative;body {
  font-family: sans-serif;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 20px;
}

h1 {
  margin-bottom: 20px;
}

#game {
  display: grid;
  grid-template-columns: repeat(4, 100px);
  grid-gap: 10px;
}

.card {
  width: 100px;
  height: 100px;
  background: #444;
  color: white;
  display: flex;
  align-items: cente
}

.card.flipped, .card.matched {
  background: #fff;
  color: #000;
  cursor: default;
}

.card.matched {
  background: #8bc34a;
}

#moves {
  margin-top: 20px;
  font-size: 1.2rem;
}

#restart {
  margin-top: 10px;
  padding: 8px 12px;
  font-size: 1rem;
  cursor: pointer;
}


const gameContainer = document.getElementById('game');
const movesSpan = document.getElementById('moves');
const restartBtn = document.getElementById('restart');

let cardValues = [
  'A','B','C','D',
  'E','F','G','H'
];
// make pairs
cardValues = [...cardValues, ...cardValues];  // 16 items, 8 pairs

let moves = 0;
let flippedCards = [];  // store DOM elements of currently flipped (max 2)
let matchedCount = 0;

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    // swap
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// build the board
function setupBoard() {
  shuffle(cardValues);
  gameContainer.innerHTML = '';  // clear

  cardValues.forEach((val, idx) => {
    const card = document.createElement('div');
    card.classList.add('card');
    card.dataset.value = val;
    card.dataset.index = idx;  // optional
    card.innerText = '';  // initially blank

    card.addEventListener('click', () => {
      flipCard(card);
    });

    gameContainer.appendChild(card);
  });

  moves = 0;
  matchedCount = 0;
  movesSpan.innerText = `Moves: ${moves}`;
}

// flip logic
function flipCard(card) {
  if (
    flippedCards.length >= 2 ||
    card.classList.contains('flipped') ||
    card.classList.contains('matched')
  ) {
    // do nothing if already two flipped, or this one already flipped/matched
    return;
  }

  card.classList.add('flipped');
  card.innerText = card.dataset.value;
  flippedCards.push(card);

  if (flippedCards.length === 2) {
    moves++;
    movesSpan.innerText = `Moves: ${moves}`;

    const [c1, c2] = flippedCards;
    if (c1.dataset.value === c2.dataset.value) {
      // it's a match
      c1.classList.add('matched');
      c2.classList.add('matched');
      flippedCards = [];
      matchedCount += 2;

      if (matchedCount === cardValues.length) {
        // game over
        setTimeout(() => {
          alert(`You won in ${moves} moves!`);
        }, 200);
      }
    } else {
      // not match â€” flip back after a delay
      setTimeout(() => {
        c1.classList.remove('flipped');
        c2.classList.remove('flipped');
        c1.innerText = '';
        c2.innerText = '';
        flippedCards = [];
      }, 800);
    }
  }
}

// restart
restartBtn.addEventListener('click', () => {
  setupBoard();
});

window.onload = () => {
  setupBoard();
};
